import React, { Component } from 'react';
import { Popup } from 'semantic-ui-react'
import fetch from 'isomorphic-fetch'

/*
This component parses HTML with <annotation> tags, to show popovers with queried data from DBPedia 

Since the content generated by CKEditor might not always be valid HTML, it is not possible to use React to render
the anntotions, therefore JQuery is used to do this on the fly
 */
class SlideAnnotationView extends Component {
    constructor(props) {
        super(props);
        this.state = {
            annotatedText: this.props.children,
            jsonLd: {},
            jsonLdFromDb: [],
            annotationDictionary: {}
        };
    }
    
    componentDidMount() {
        this.loadJsonLdFromDb().then(() => {
            this.queryDbpedia();
        });
    }
    
    componentDidUpdate(prevProps) {
        const newProps = this.props;
        
        if (this.state.annotatedText !== this.props.children) {
            this.setState({
                annotatedText: this.props.children
            });
        }
        
        // reload dbpedia data when a slide has chaned
        if (newProps.slideId !== prevProps.slideId) {
            this.loadJsonLdFromDb().then(() => {
                this.queryDbpedia();
            });
        }
        
        this.$annotationContainer = $(this.annotationContainer);
        
        this.$annotationContainer.find('annotation').each(function(i, elm) {
            let annotationId = $(elm).attr('annotation-id');
            
            // if there is data available to show
            if (typeof this.state.annotationDictionary[annotationId] !== 'undefined') {
                let annotationData = this.state.annotationDictionary[annotationId];
                
                $(elm).css({
                    'color': '#0069d9',
                    'cursor': 'pointer',
                    'text-decoration': 'underline'
                });
                
                let popup = `
                    ${annotationData['thumbnail'] ? `
                    <div style="width:150px;height:150px;overflow:hidden;border-radius:500px;margin:10px auto">
                         <img src="${annotationData['thumbnail']}"" style="object-fit: cover;width:100%;height:100%" alt="" />
                    </div>
                    ` : ``}
                    <p>
                    ${annotationData['desc']}
                    ${annotationData['@id'] ? `<div class="ui center aligned"><a href=${annotationData['@id']} target="_blank" class="ui button center">Open DBpedia</a></div>` : ``}
                    </p>`;
                
                $(elm).popup({
                    hoverable: true,
                    html: popup
                });
            }
        }.bind(this));
    }
    
    loadJsonLdFromDb() {
        if (this.props.slideId == null || this.props.slideId == '') {
            return;
        }
        
        return fetch('http://localhost:3030/annotations/' + this.props.slideId)
            .then(function(response) {
                return response.json();
            })
            .then(function(jsonResponse) {
                this.setState({
                    jsonLdFromDb: jsonResponse
                }, () => {
                    this.convertJsonToObject();
                })
            }.bind(this));
    }
    
    convertJsonToObject() {
        let dict = {}
        for (let i=0;i<this.state.jsonLdFromDb.length;i++) {
            dict[this.state.jsonLdFromDb[i]['Schema:identifier']] = this.state.jsonLdFromDb[i];
        }
        
        this.setState({annotationDictionary: dict});
    }
    
    queryDbpedia() {
        let annotations = this.state.annotationDictionary;
        let promises = [];
        
        for (let annotation in annotations) {
            promises.push(this.getAdditionalData(annotation, annotations[annotation]['@id']));
        }

        Promise.all(promises).then((res) => {
            let annotationDictionary = this.state.annotationDictionary;
            
            for (let i=0; i<res.length; i++) {
                let annotionalContent = res[i];
                annotationDictionary[annotionalContent['id']]['desc'] = annotionalContent['desc'];
                annotationDictionary[annotionalContent['id']]['thumbnail'] = annotionalContent['thumbnail'];
            }

            this.setState({
                annotationDictionary: annotationDictionary
            });
        });
    }
    
    getAdditionalData(id, resource) {
        var query = `
        PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
        SELECT str(?desc) ?thumbnail
            WHERE {
                { 
                    <${resource}> <http://www.w3.org/2000/01/rdf-schema#comment> ?desc
                    FILTER (langMatches(lang(?desc),"en")) 
                }
                UNION 
                {
                    <${resource}> dbpedia-owl:thumbnail ?thumbnail
                }
            }
        `;
        
        let url = 'http://dbpedia.org/sparql/';

        var queryUrl = url+"?query="+ encodeURIComponent(query) +"&format=json";
        
        return fetch(queryUrl)
           .then(function(res) {
               return res.json();
           })
           .then(function(res) {
               let desc = res.results.bindings.length > 0 ? res.results.bindings['0']['callret-0'].value.substring(0, 250) + '...' : null;
               let thumbnail = typeof res.results.bindings['1'] !== 'undefined' ? res.results.bindings['1'].thumbnail.value : null;
           
               return {
                   'id': id,
                   'desc': desc,
                   'thumbnail': thumbnail
               };
           });
    }
    
    generateJsonLd() {
        let jsonFromDb = this.state.jsonLdFromDb;
        let generatedJsonLd = [];
        
        for (let i=0; i<jsonFromDb.length; i++) {
            let item = jsonFromDb[i];
            
            generatedJsonLd.push({
                '@context': item['@context'] !== 'undefined' ? item['@context'] : '',
                '@id': item['@id'] !== 'undefined' ? item['@id'] : '',
                '@type': item['@type'] !== 'undefined' ? item['@type'] : '',
                'Schema:identifier': item['Schema:identifier'] !== 'undefined' ? item['Schema:identifier'] : '',
                'Schema:name': item['Schema:name'] !== 'undefined' ? item['Schema:name'] : '',
            });
        }
    
        if (generatedJsonLd.length == 0) {
            return '';
        }
        
        return '<script type="application/ld+json">' + JSON.stringify(generatedJsonLd) + '</script>';
    }

    render() {
        //console.log(this.props.children);
        let content = this.props.children;
        let jsonLd = this.generateJsonLd();
        content += jsonLd;
        
        return <div dangerouslySetInnerHTML={{__html: content}} ref={annotationContainer => this.annotationContainer = annotationContainer} ></div>;
    }
}

export default SlideAnnotationView;
