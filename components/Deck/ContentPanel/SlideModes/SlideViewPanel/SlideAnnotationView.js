import React, { Component } from 'react';
import { Popup } from 'semantic-ui-react';
import fetch from 'isomorphic-fetch';

/*
This component parses HTML with <annotation> tags, to show popovers with queried data from DBPedia 

Since the content generated by CKEditor might not always be valid HTML, it is not possible to use React to render
the anntotions, therefore JQuery is used to do this on the fly
 */
class SlideAnnotationView extends Component {
    constructor(props) {
        super(props);
        this.state = {
            annotations: {}
        };
    }
    
    componentDidMount() {
        let annotations = this.convertAnnotationsToJsonLd(this.props.annotations);
        
        this.setState({
            annotations: annotations
        }, () => {
            this.queryDbpedia();
        });
    }
    
    componentDidUpdate(prevProps) {
        const newProps = this.props;

        // reload dbpedia data when a slide has chaned
        if (newProps.slideId !== prevProps.slideId) {
            let annotations = this.convertAnnotationsToJsonLd(newProps.annotations);
            
            this.setState({
                annotations: annotations
            }, () => {
                this.queryDbpedia();
            });
        }
        
        this.$annotationContainer = $(this.annotationContainer);
        
        this.$annotationContainer.find('annotation').each((i, elm) => {
            let annotationId = $(elm).attr('annotation-id');
            
            // if there is data available to show
            if (typeof this.state.annotations[annotationId] !== 'undefined') {
                let annotationData = this.state.annotations[annotationId];
                
                $(elm).css({
                    'color': '#0069d9',
                    'cursor': 'pointer',
                    'text-decoration': 'underline'
                });
                
                let popup = `
                    ${annotationData.thumbnail ? `
                    <div style="width:150px;height:150px;overflow:hidden;border-radius:500px;margin:10px auto">
                         <img src="${annotationData.thumbnail}"" style="object-fit: cover;width:100%;height:100%" alt="" />
                    </div>
                    ` : ''}
                    <p>
                    ${annotationData.desc != null ? annotationData.desc : ''}
                    ${annotationData['@id'] ? `<div class="ui center aligned"><a href=${annotationData['@id']} target="_blank" class="ui button center">Open resource</a></div>` : ''}
                    </p>`;
                
                $(elm).popup({
                    hoverable: true,
                    html: popup
                });
            }
        });
    }
    
    convertAnnotationsToJsonLd(annotations) {
        let returnData = { };
                        
        for (let i=0; i<annotations.length; i++) {
            let annotation = annotations[i];
            returnData[annotation.inlineId] = {
                '@id': annotation.uri,
                '@type': annotation.type.indexOf(',') > -1 ? annotation.type.split(',') : annotation.type,
                'Schema:name': annotation.name,
                'Schema:identifier': annotation.inlineId,
                '_autoGenerated': annotation.autoGenerated,
                '@context': { //for context for each annotation
                    'Schema': 'http://schema.org/',
                    'Wikidata': 'http://www.wikidata.org/entity/',
                    'DBpedia': 'http://dbpedia.org/ontology/'
            	},
            };
        }
        
        return returnData;
    }
    
    queryDbpedia() {
        let annotations = this.state.annotations;
        let promises = [];
        
        for (let annotation in annotations) {
            promises.push(this.getAdditionalData(annotation, annotations[annotation]['@id']));
        }

        Promise.all(promises).then((res) => {            
            for (let i=0; i<res.length; i++) {
                let annotionalContent = res[i];
                annotations[annotionalContent.id].desc = annotionalContent.desc;
                annotations[annotionalContent.id].thumbnail = annotionalContent.thumbnail;
            }

            this.setState({
                annotations: annotations
            });
        });
    }
    
    getAdditionalData(id, resource) {
        let query = `
        PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
        SELECT str(?desc) ?thumbnail
            WHERE {
                { 
                    <${resource}> <http://www.w3.org/2000/01/rdf-schema#comment> ?desc
                    FILTER (langMatches(lang(?desc),"en")) 
                }
                UNION 
                {
                    <${resource}> dbpedia-owl:thumbnail ?thumbnail
                }
            }
        `;
        
        let url = 'http://dbpedia.org/sparql/';
        let queryUrl = url+'?query='+ encodeURIComponent(query) +'&format=json';
        
        return fetch(queryUrl)
           .then((res) => {
               return res.json();
           })
           .then((res) => {
               let desc = typeof res.results.bindings['0'] !== 'undefined' && typeof res.results.bindings['0']['callret-0'] !== 'undefined' ? res.results.bindings['0']['callret-0'].value.substring(0, 250) + '...' : null;
               let thumbnail = typeof res.results.bindings['1'] !== 'undefined' ? res.results.bindings['1'].thumbnail.value : null;
           
               return {
                   'id': id,
                   'desc': desc,
                   'thumbnail': thumbnail
               };
           });
    }
    
    generateJsonLd() {
        let annotations = this.state.annotations;
        let generatedJsonLd = [];
        
        for (let annotation in annotations) {
            let item = annotations[annotation];
            
            generatedJsonLd.push({
                '@context': item['@context'] !== 'undefined' ? item['@context'] : '',
                '@id': item['@id'] !== 'undefined' ? item['@id'] : '',
                '@type': item['@type'] !== 'undefined' ? item['@type'] : '',
                'Schema:identifier': item['Schema:identifier'] !== 'undefined' ? item['Schema:identifier'] : '',
                'Schema:name': item['Schema:name'] !== 'undefined' ? item['Schema:name'] : '',
            });
        }
    
        if (generatedJsonLd.length === 0) {
            return '';
        }
        
        return '<script type="application/ld+json">' + JSON.stringify(generatedJsonLd) + '</script>';
    }

    render() {
        let content = this.props.children;
        let jsonLd = this.generateJsonLd();
        content += jsonLd;
        
        return <div dangerouslySetInnerHTML={{__html: content}} ref={(annotationContainer) => this.annotationContainer = annotationContainer} ></div>;
    }
}

export default SlideAnnotationView;
